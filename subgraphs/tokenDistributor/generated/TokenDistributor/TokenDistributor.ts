// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Claimed extends ethereum.Event {
  get params(): Claimed__Params {
    return new Claimed__Params(this);
  }
}

export class Claimed__Params {
  _event: Claimed;

  constructor(event: Claimed) {
    this._event = event;
  }

  get user_id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get leaf(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class TransferUnclaimed extends ethereum.Event {
  get params(): TransferUnclaimed__Params {
    return new TransferUnclaimed__Params(this);
  }
}

export class TransferUnclaimed__Params {
  _event: TransferUnclaimed;

  constructor(event: TransferUnclaimed) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class TokenDistributor extends ethereum.SmartContract {
  static bind(address: Address): TokenDistributor {
    return new TokenDistributor("TokenDistributor", address);
  }

  CONTRACT_ACTIVE(): BigInt {
    let result = super.call(
      "CONTRACT_ACTIVE",
      "CONTRACT_ACTIVE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_CONTRACT_ACTIVE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "CONTRACT_ACTIVE",
      "CONTRACT_ACTIVE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deployTime(): BigInt {
    let result = super.call("deployTime", "deployTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_deployTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("deployTime", "deployTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isClaimed(index: BigInt): boolean {
    let result = super.call("isClaimed", "isClaimed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBoolean();
  }

  try_isClaimed(index: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isClaimed", "isClaimed(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  merkleRoot(): Bytes {
    let result = super.call("merkleRoot", "merkleRoot():(bytes32)", []);

    return result[0].toBytes();
  }

  try_merkleRoot(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("merkleRoot", "merkleRoot():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  timeLockContract(): Address {
    let result = super.call(
      "timeLockContract",
      "timeLockContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_timeLockContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "timeLockContract",
      "timeLockContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _timeLock(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _merkleRoot(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimTokensCall extends ethereum.Call {
  get inputs(): ClaimTokensCall__Inputs {
    return new ClaimTokensCall__Inputs(this);
  }

  get outputs(): ClaimTokensCall__Outputs {
    return new ClaimTokensCall__Outputs(this);
  }
}

export class ClaimTokensCall__Inputs {
  _call: ClaimTokensCall;

  constructor(call: ClaimTokensCall) {
    this._call = call;
  }

  get user_id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get delegate_to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get merkle_proof(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get leaf(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get temporary_address(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get leaf_signature_hex(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class ClaimTokensCall__Outputs {
  _call: ClaimTokensCall;

  constructor(call: ClaimTokensCall) {
    this._call = call;
  }
}

export class TransferUnclaimedCall extends ethereum.Call {
  get inputs(): TransferUnclaimedCall__Inputs {
    return new TransferUnclaimedCall__Inputs(this);
  }

  get outputs(): TransferUnclaimedCall__Outputs {
    return new TransferUnclaimedCall__Outputs(this);
  }
}

export class TransferUnclaimedCall__Inputs {
  _call: TransferUnclaimedCall;

  constructor(call: TransferUnclaimedCall) {
    this._call = call;
  }
}

export class TransferUnclaimedCall__Outputs {
  _call: TransferUnclaimedCall;

  constructor(call: TransferUnclaimedCall) {
    this._call = call;
  }
}
